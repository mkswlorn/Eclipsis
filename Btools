--script is unfinished and will remain that way
local MultiSelect = false
local selectedparts = {}
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()
local input = game:GetService("UserInputService")
 local DrillLoc = player.Backpack:FindFirstChild('Laser Drill') or player.Character:FindFirstChild('Laser Drill')
input.InputBegan:connect(function(k)
    local key = k.KeyCode
    if key == Enum.KeyCode.H then
        MultiSelect = true
    end
end)
input.InputBegan:Connect(function(Inputs)
while Inputs.UserInputType == Enum.UserInputType.MouseButton1 and MultiSelect do
wait()
		     if mouse.Target ~= nil and mouse.Target.Parent.Parent == workspace.Map or mouse.Target.Parent.Parent == workspace.Structures  then
        Object = mouse.Target.Parent
        local selectionbox = Instance.new("SelectionBox", Object)
        if not table.find(selectedparts, Object) then
        selectionbox.Adornee = Object
        table.insert(selectedparts, Object)
        end
		     end
end
    end)
	local function Drill(Part, Ammount)
	    local DrillLoc = player.Backpack:FindFirstChild('Laser Drill') or player.Character:FindFirstChild('Laser Drill')
		for i = 1, Ammount do
			if DrillLoc then
				DrillLoc.Remote:FireServer("HitReported", game.Players.LocalPlayer.Character.HumanoidRootPart.Position, Part, Part.Position, Vector3.new())
			end
		end	
	end
		local function Sapping(Part, Amount)
	    local PistLoc = player.Backpack:FindFirstChild('Pistol') or player.Character:FindFirstChild('Pistol')
		for i = 3, Amount do
			if PistLoc then
				PistLoc.Remote:FireServer("HitReported", game.Players.LocalPlayer.Character.HumanoidRootPart.Position, Part, Part.Position, Vector3.new())
			end
		end	
	end
input.InputEnded:connect(function(k)
    local key = k.KeyCode
    if key == Enum.KeyCode.H then
        MultiSelect = false
        for i,v in pairs(selectedparts) do
                          for i,y in pairs(v:GetDescendants()) do
                    if y:IsA("SelectionBox") then
                        y:Remove()
                    end
                end
end

        for i,v in pairs(selectedparts) do
            for i,l in pairs(v:GetChildren()) do
                if l:IsA('Part') or l:IsA('MeshPart') or l:IsA("Union") or l:IsA('Mesh') or l:IsA('UnionOperation') then
       spawn(function()
       repeat wait()
           if DrillLoc then
     Drill(l,1) 
     else 
         if not DrillLoc and l:IsDescendantOf(workspace.Structures) then
     Sapping(l,8)    
         end
         end
until nil or not l:IsDescendantOf(game) 
                end)
                end
end
end
selectedparts = {}
end
end)

mouse.Button1Down:Connect(function()
   if MultiSelect == true then
    if mouse.Target ~= nil then
        Object = mouse.Target.Parent
        local selectionbox = Instance.new("SelectionBox", Object)
        if Object.Parent == workspace.Map or Object.Parent == workspace.Structures  or nil and not table.find(selectedparts, Object) then
        selectionbox.Adornee = Object
        table.insert(selectedparts, Object)
        end
end
else
    if not DrillLoc and mouse.Target:IsDescendantOf(workspace.Structures) then
        local part = mouse.Target
        spawn(function()
       repeat wait()
     Sapping(part,20) 
until nil or not part:IsDescendantOf(game) 
                end)
    end
    if tPlayer then
     Sapping(tPlayer.Character.Head,20) 
        end
Drill(mouse.Target, 100)
end
end)
local sb = Instance.new("SelectionBox",workspace)
mouse.Move:Connect(function()
    local DrillLoc = player.Backpack:FindFirstChild('Laser Drill') or player.Character:FindFirstChild('Laser Drill')
     target = mouse.Target
         tPlayer = game.Players:GetPlayerFromCharacter(target.Parent)
         if DrillLoc then
            if target:IsDescendantOf(workspace.Map) or target == nil then
                 for i,v in pairs(workspace.Map:GetChildren()) do
                if target:IsDescendantOf(v) then
                sb.Adornee = v or nil
                sb.Color3 = Color3.fromRGB(0, 100, 255)
                end
                 end
            end
                        if target:IsDescendantOf(workspace.Structures) or target == nil then
                 for i,v in pairs(workspace.Structures:GetChildren()) do
                if target:IsDescendantOf(v) then
                sb.Adornee = v or nil
                sb.Color3 = Color3.fromRGB(255, 155, 0)
                end
                 end
            end
        
            
if  not target:IsDescendantOf(workspace.Map) and not target:IsDescendantOf(workspace.Structures) then
        sb.Adornee = nil
        --sb:Destroy()
        end
end
         if not DrillLoc then
        if  target:IsDescendantOf(workspace.Structures) or target == nil then
            for i,v in pairs(workspace.Structures:GetChildren()) do
                if target:IsDescendantOf(v) then
        sb.Adornee = v or nil
        sb.Color3 = Color3.fromRGB(255, 155, 0)
                end
                end
        end
 if  not target:IsDescendantOf(workspace.Structures) then
        sb.Adornee = nil
        --sb:Destroy()
        end
 end

        if tPlayer then 
      sb.Adornee = target.Parent and tPlayer and tPlayer.Character or nil  
      sb.Color3 = Color3.fromRGB(255, 0, 0)
        end
    
end)
